# Snakemake-relevant Python for R Users

Snakefiles are YAML formatted files which are interpreted by Python, and,
as such, considerable value can be gained from knowing how to use Python
in this context.  Many biologists I know are quite familiar with R, but
fewer are equally well-versed in Python. So the purpose of this chapter
is to provide a little background on Python (from the eyes of an R user)
that is most useful for embellishing one's Snakefiles and workflows.  The key goal
for this chapter is to introduce several simple Python constructs that can be particularly useful
in Snakemake, allowing the user to competently use several central
Snakemake features: _config files_, _input functions_, and _pandas input_.

The second main goal of this chapter is to illustrate an approach to working
interactively with Python (the way R users might be familiar with working with
R) within the RStudio environment.  As we will see in the next chapter,
this will allow users to run Python code
associated with their Snakefile in the context of an interactive Python session,
which can be considerably more illuminating---and more helpful for tracking down
bugs/errors/inconsistencies---than only getting to run that code by running
Snakemake on your Snakefile.  Being able to work interactively with the Python code
as Snakemake might see it is very helpful to learning how to write workflows.
The next chapter has most of the gory details for this second goal, like some
little hacks for seeing input function
parameters as Snakemake might see them, etc., primarily as a learning tool to aid
in figuring out how to write Python code within Snakemake.  In this chapter, though
we talk about how to set up RStudio to work interactively in the python environment
that snakemake uses. 

The order of events here is thus:

1. Use the R package 'reticulate' to run python, interactively, in our
Snakemake conda environment.
2. Once we can work interactively in python easily, we will discuss a few of the 
main data structures and operations in python, by comparison to their equivalents
in R and the tidyverse, talk about defining functions, and take a brief
tour of python's 'pandas' package, which is similar in its functionality to
R's tidyverse.



3. With that background we will tackle our exploration of Snakemake's use of
  - YAML-based configuration files (i.e., config.yaml)
  - Input functions for converting wildcard values to specialized input paths or
    parameter values.
  - pandas for the inclusion of tabular information into the Snakemake workflow,
    itself.


## Running python, interactively, in RStudio

The folks at Posit (the company that started as RStudio) make a great integrated
development environment (IDE) for working with R; however they also recognized the
need for being a great IDE for other languages, like python and julia.  As I understand
it, that was part of the reason that they changed their name to Posit---to be less
tied to the R language.  At any rate, they have tools for running python code, much
like you would run R code in RStudio. 

### Get mamba and create a snakemake environment

You can do this on your laptop, rather than upon the cluster; however,
if you have been working on Alpine, you should skip the rest of this section and get an RStudio session
on Alpine following the directions in @sec-ondemand.  Returning to here to get the
reticulate package and proceed.


If you are doing this on your laptop, fortunately,
mamba works on all platforms, and so does Snakemake.  But you might need to first install
mamba on your laptop.  This is pretty straightforward.  If you do not already have
mamba on your laptop, find the instructions for your platform [here](https://github.com/conda-forge/miniforge?tab=readme-ov-file#install) and follow
them.  You should be able to just use the default location for your conda/mamba library.

Once you are done with that, you will want to create a snakemake environment on your
laptop.  Do that by following the directions that we used on our clusters,
[here](https://eriqande.github.io/con-gen-csu/snake-slides.html#/setting-up-our-workspaces),
without bothering to be on a compute node, of course, since you are on your laptop!

When both of the above are done, we can move on to working with python in RStudio.



### Get the reticulate package and run python from your snakemake conda environment

The reticulate package allows you to run python in a comfortable, interactive way
within an R (and RStudio) session.  Importantly, it allows you to run the exact
python version that Snakemake uses, by letting you load the snakemake conda environment.

So, Sync your fork, then open up the RStudio project for your fork of the `con-gen-csu` repo, make sure
you are on the main branch, and then pull, to make sure that you have all the recent
materials from the course.


If you do not already have the 'reticulate', R-package, get it with this command at the R console
in Rstudio:
```r
install.packages("reticulate", repos = "https://cran.rstudio.com/")
```
Note that, on Alpine, it is critical that you add the `repos = "https://cran.rstudio.com/`
part in there.  The RStudio Server maintained by CURC in OpenOnDemand is
configured by default to draw its packages from a repository full of binary versions, and
it may end up givng you versions of packages which are much older than the most recent
versions. (At the time of this wriring, it installed 'reticulate' version 1.28 instead
of 1.35, and all the following steps failed...I lost a good several hours because of that!!)

Then, you can load the package with:
```r
library(reticulate)
```

Now, we want to use python from a particular conda environment---our
snakemake conda environment, in fact.  For that there is a reticulate
function called `use_condaenv()`.  We can tell it which conda
environment to use, most reliably, by passing the absolute path of the
environment to the function.  This path will be the path to your conda library
plus `envs` plus the name of the environment.  For example on my laptop that
would translate into:
```r
use_condaenv(condaenv = "~/mambaforge-arm64/envs/snakemake-8.5.3")
```
However, if you are on Alpine, your conda library would probably be in `/project/user@colostate.edu/miniforge`.

While on my RStudio Server session on Alpine I would do:
```r
use_condaenv(condaenv = "/projects/eriq@colostate.edu/miniforge3/envs/snakemake-8.5.3")
```
At any rate, it should be easy to find the path to your snakemake environment
using tab-completion for path names in your R console.


Once you have successfully given the above command, you can start a python
REPL (Read Evaluate Print and Loop) session in your R console with:
```r
repl_python()
```
After you have done that, you should see something that looks like this:
```r
> repl_python()
Python 3.12.2 (/Users/eriq/mambaforge-arm64/envs/snakemake-8.5.3/bin/python)
Reticulate 1.35.0 REPL -- A Python interpreter in R.
Enter 'exit' or 'quit' to exit the REPL and return to R.
>>> 
```
The command prompt has now changed to `>>>` and anything you type at it will
be interpreted as python code.

So, you can't just type R code into it any longer.  For example, see what happens
if you type this in there:
```r
x <- 1:4
```
But you can type python code, for example:
```python
x = [1,2,3,4]
```
Then try:
```python
x
```

## R and Python: compare and contrast

You can consider this a sort of Berlitz language course for R-speakers on how to
communicate in Python.  It assumes that y'all know something about R. This is
really just scratching the surface of both langauges, but it will supply you with
a few important things for working in Snakemake.  

### Python doesn't have native vectors

In R, we are all familiar with vectors.  Each element of a vector is of the
same _type_, i.e., integer, numeric, or character/string, etc.  Here we make
a numeric vector and a character vector in R:
```{r, filename="R:"}
# numeric vector
x <- 1:10

# character vector
y <- c("a", "b", "c")
```
One nice feature of having vectors is that we can do array processing of them---i.e.,
many operations/functions in R are _vectorized_: they do the same thing to each element
of the vector.  For example:
```{r, filename="R:"}
x^2

paste(y, "!", sep = "")
```

By contrast, vectors and vectorized operations, as such, _do not_ exist natively in Python. Some packages provide
that type of functionality, but it is not "baked into the guts of the language" the way
it is in R.


### Python's native array is like an R list (without any names)

Though python does not have a native vector class, like R's, it does have something
that is very similar to an R list, and, in fact, in python these are called "lists."

In R you make a list, which is a special type of vector that can include
elements of different types (i.e., one element could be an integer, another a
character/string, another a numeric vector, and another a list!, etc.), like this:
```{r, filename="R:"}
L_R <- list(1, 2, "R", "word", 10)
```
and you could find its length with:
```{r, filename="R:"}
length(L_R)
```

The equivalent data structure in Python is a list and it is formed with `[ ]`:
```{python, filename="python:"}
L_Py = [1, 2, "R", "word", 10]
```
and you can get its length with:
```{python, filename="python:"}
len(L_Py)
```

You can access the elements of an R list using the `[[ ]]` operator and the index
of each element.  In R, lists are "base-1 indexed," which means the
first element has the index 1, and the second the index 2, and so forth.
For example:
```{r, filename="R:"}
# get the first element of the R list L_R
L_R[[1]]

# get the fourth element of the R list L_R
L_R[[4]]
```
To access elements of a python list you use `[ ]`, but **(THIS IS EXTREMELY IMPORTANT!)**
python lists are "base-0 indexed"---
the indexes of a python list start from 0, instead of 1.  So,
if you want the **first** element of a python list, you subscript it with 0:
```{python, filename="python:"}
L_Py[0]
```
While, if you wanted the 4-th element of a python list you would subscript it with 3:
```{python, filename="python:"}
L_Py[3]
```


### Double or single quotes in Python?

We also note in the above output that python seems to have a preference for using single quotes for
strings in its output; however just as in R, you can use `"` and `'` somewhat interchangeably in Python.
According to
[StackOverflow](https://stackoverflow.com/questions/65758620/are-there-any-differences-in-and-in-python):
```python
In Python there is no difference between both quotations of a string.
As you have noticed both result in the same value stored in a variable.

There is an important advantage of being able to use these quotation marks
interchangeably - you can include in the string the quotation mark that you
are not using to enquote the string, e.g.:

single = "This string variable contains 'single' quotation marks."
double = 'This string variable contains "double" quotation marks.'
```

So, that is sort of like R, though R makes internal substitutions and
some backslack-escaping of double quotes.  Here is the R version:
```{r, filename="R:"}
# R
heck_double <- "What the 'heck'?"
heck_single <- 'What the "heck"?'

heck_double
heck_single
```

Here is the Python version:
```{python, filename="python:"}
# python
heck_double = "What the 'heck'?"
heck_single = 'What the "heck"?'

heck_double
heck_single
```

That said, every Snakefile I have seen out in the wild tends to use double quotes to
enquote path names and simple command lines.

### Replacement of elements of a list

In R, you know that you can change one element of a list with a simple assignment to that
element:
```{r, filename="R:"}
L_R[[5]] <- "New Last Element"

# now we print the whole list
L_R
```

In python we can do exactly the same thing:
```{python, filename="python:"}
L_Py[4] = "New Last Element"

# now print the whole python list
L_Py
```

### Operating on every element of a list

Since vectorized operations do not occur automatically over the elements of lists in R,
you may be familiar with the `lapply()` function in R, which applies a function to every
element of a list.  So, if we wanted to append "Weird!" to every element of list `L_R`, we
could do something like this:
```{r, filename="R:"}
lapply(L_R, function(x) paste(x, "Weird!"))
```
Here, we have, on the fly, defined a new function using the `function()` function in
R.  This is called an "anonymous" function because we do not give it a name, but it returns
a function in the context where R is expecting a function (i.e., the `FUN` argument of `lapply()`).
We see above that `lapply()` returns a list.  

In python, there is a function very similar to `lapply()` in R, and it is called `map`. Additionally,
there is a notion of an "anonymous" function, but, in python, these are called "lambda" functions. The
analogous syntax in python for appending "Weird!" to each element of a list would be:
```{python, filename="python:"}
map(lambda x: str(x) + " Weird!", L_Py)
```

`map` is like `lapply()` but the order of its arguments is reversed---it takes the function
first and the list second---and it doesn't automatically return a list; rather, as you can see,
it returns a `<map object at some_location>` where some `some_location` is the address of
some computer memory, like `0x292826170`. 

If you want to get the actual list back from `map(lambda x: str(x) + " Weird!", L_Py)` you have
to pass it into python's `list()` function:
```{python, filename="python:"}
list(map(lambda x: str(x) + ' Weird!', L_Py))
```


### Type conversion is not automatic in Python

In R, some type conversion is automatic if it goes from a more restricted to a more general type.
In other words, if you are passing an integer or a numeric variable into a function or context
that is expecting a string, R will happily convert the numeric variable to a string.  Hence you can
do:
```{r, filename="R:"}
paste("Pi is", 3.1415)
```
In the above, `3.1415` is a numeric variable, but R is content to convert it to a string to `paste()` it
to the string "Pi is".  

Python does not automatically convert types to the more general type.  As we saw above, to concatenate
two strings in python we can use the `+` operator:
```{python, filename="python:"}
'string1' + 'string2'
```
However python won't automatically convert an numeric type, say, to a character type to get this job
done.  In other words, if we do this in python:
```{python, filename="python:"}
#| error: true
x = "Pi is "
y = 3.1415

x + y
```
We get an error, rather than getting "Pi is 3.1415".

Therefore, when mixing types in an operation, but desiring a particular type as the
output, you may need to _coerce_ variables to that output type.  For example:
```{python, filename="python:"}
x + str(y)
```

The five data types in python that correspond to R's five, main, atomic data types are given
in the following tables, along with the functions used for coercion to that data type.

::: {#tbl-panel layout-ncol=2}
| type    |  coercion         |  examples  |
|---------|-------------------|--------------------|
| logical | `as.logical()`    |  `TRUE`, `FALSE`       |
| integer | `as.integer()`    | `3L`, `16L`            |
| numeric | `as.numeric()`    | `3`, `16`, `4.2`       |
| complex | `as.complex()`    | `3.2 + 4i`             |
| character| `as.character()` | `"foo"`, `'bar'`

: R Types {#tbl-first}

| type    |  coercion         |  examples  |
|---------|-------------------|----------------------|
| bool    | `bool()`          |  `True`, `False`     |
| int     | `int()`           | `3`, `16`            |
| float   | `float()`         | `3.0`, `16.0`, `4.2` |
| complex | `complex()`       | `3 + 4j`, `8.2 + 2.3j` |
| str     | `str()`           | `"foo"`, `'bar'`

: Python Types {#tbl-second}

Five atomic data types in R and Python
:::

We emphasize a few important points here:

1. Python uses `True` and `False` for its Boolean types, while R uses `TRUE` and `FALSE`.
The capitalization differences are very important.  The variations don't work across
languages!
2. While R has the `class()` function to tell you what class any abject is,
python has the `type()` function that tells you what data type
an object is.  This can be quite useful for familiarizing yourself with what
is going on in your own code, or someone else's:
```{r, filename="R:"}
list2 <- list(FALSE, 3L, 3.1415, 3 + 4.2i, "Boing!")
lapply(list2, class)
```

```{python, filename="python:"}
list2 = [False, 3, 3.1415, 3 + 4.2j, "Boing!"]
list(map(type, list2))
```

3. `list` is itself a data type in python, and when we write `list(map(type, list2))`
we are essentially coercing and object of class `map` to be a list.

### List comprehension: Operating on every element of a list, Part 2

Previously, we saw the R `lapply()` command.  We note here that you could have applied
a function to every element of a list in R using a `for` loop. We could have done something like this:
```{r, filename="R:"}
L_R2 <- list()
for(i in 1:length(L_R)) L_R2[[i]] <- paste(L_R[[i]], "Weird!")

# now print it out:
L_R2
```

The above is not considered good R style, it is not much fun to look at and it will
operate more slowly than `lapply()` in most circumstances.  However, it is good to
see this to motivate an approach in python for operating on every element of a list
(and returning a list) that _is_ considered good python style.  This is called the syntax
of "list comprehension", and it looks like this:
```{python, filename="python, but not meant to be run:"}
#| eval: false
["do something to x" for x in list]
```
where "do something to x" is replaced by some operation on a variable called `x` (or whatever
you might want to call it) and list is an existing list object.  

So, to paste "Weird!" onto the elements of the list `L_Py` via list comprehension we
would do:
```{python, filename="python:"}
[str(x) + " Weird!" for x in L_Py]
```
See that it returns a list.  Unlike in R, for loops, and especially those within
a list comprehension, are not eschewed.

There is actually a further subtlety here.  The `for` in there can cycle over the
elements in a list, but in fact, it is much more general.  It can cycle over all
the elements in any "iterable" (i.e., able to be iterated over), object.  For example
a single string like `"ABCDEFG"` is iterable---python will iterate over the differnt
letters in the string.  Thus you could make a list of the letters in a string like:
```{python, filename="python:"}
[x for x in "ABCDEFG"]
```

In fact, you can go even for even more economy and note that `list()` in python
applied to any iterable object, will automatically iterate over the iterable elements
in the abject.  Hence, this does the same as the previous line:
```{python, filename="python:"}
list("ABCDEFG")
```

That is good to keep in mind.  If you want a list of length 1 that includes the
string `"ABCDDEFG"`, then, rather that `list("ABCDEFG")`, you would want to do:
```{python, filename="python:"}
["ABCDEFG"]
```


### For lists, `+` in python is like `c()`---it catenates the lists

In R, if you want to add one list onto the end of another, essentially catenating them,
you would use `c()` like this:
```{r, filename="R:"}
c(L_R, list("add", "some", "more", 3))
```

In python, you use `+` for that type of operation:
```{python, filename="python:"}
L_Py + ["add", "some", "more", 3]
```


### Named lists in R and `dict`s in python

In R, the separate elements of a list can be _named_ and we can use the names to
access them.  For exmaple:
```{r, filename="R:"}
dinners <- list(
  Monday = "Arctic char",
  Tuesday = "Chicken soup",
  Wednesday = "Pizza",
  Thursday = "Stir fry",
  Friday= "Fend for yourselves, kids!"
)
```
And then we can access each element of the list by its name in two ways:
```{r, filename="R:"}
# either with the dollar sign
dinners$Tuesday

# or with double brackets
dinners[["Friday"]]
```

And of course we can assign values to that list in either way:
```{r, filename="R:"}
# make the changes
dinners$Friday <- "Go out to brewery"
dinners[["Tuesday"]] <- "Burritos"

# then see what that did:
dinners
```
Interestingly, the elements of a named list in R can still be accessed by their index.  We could
get "Pizza" out the `dinners` list in three different ways:
```{r, filename="R:"}
dinners$Wednesday
dinners[["Wednesday"]]
dinners[[3]]
```



Lists in python do not take names like lists in R; however, there is another data type in
python that does behave something like a named list.  This data type is called a **dict**, which
is, I believe, short for "dictionary."  We can make a `dict` of our dinners like this:
```{python, filename="python:"}
dinners = {
  "Monday": "Arctic char",
  "Tuesday": "Chicken soup",
  "Wednesday": "Pizza",
  "Thursday":  "Stir fry",
  "Friday": "Fend for yourselves, kids!"
}
```
And we can print it like this:
```{python, filename="python:"}
dinners
```
which is not much fun to look at, and gets really ugly when the dict has multiple
nested levels (which is definitely possible, and we will see examples of that
when we start playing with Snakemake config files).

As a side note, there is a python module called `pprint` that will pretty-print
a variety of python objects.  It can be used like this:
```{python, filename="python:"}
# import only needs to happen once per session
import pprint

pprint.pp(dinners)
```
That is way more palatable!

Elements of a dictionary can be accessed much like elements of a named list in R, but
python uses `[ ]` for that (rather than `$` or ``[[ ]]``) like this:
```{python, filename="python:"}
dinners["Thursday"]
```

In R, lists can be nested with multiple levels, and the same is true in python. 
```{python, filename="python:"}
meals = {
  "Monday": {"breakfast": "eggs", "lunch": "salad", "dinner": "Arctic char"},
  "Tuesday": {"breakfast": "oatmeal", "lunch": "sandwich", "dinner": "Chicken soup"}
}
```
Now, each element at the top level (Monday or Tuesday) is itself a `dict` with three
elements (breakfast, lunch, and dinner). If you want to get the value for Tuesday's
lunch, you just drill down into the dict, much like you would in a named R list:
```{python}
meals["Tuesday"]["lunch"]
```



### Defining functions

### R library and python modules

### Tabular data: pandas